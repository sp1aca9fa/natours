{"mappings":"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","sources":["<anon>","public/js/index.js","public/js/leaflet.js","public/js/login.js","public/js/alerts.js","public/js/updateSettings.js","public/js/stripe.js"],"sourcesContent":["require(\"@babel/polyfill\");\nvar $lRq1g$axios = require(\"axios\");\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/* eslint-disable */ \n/* eslint-disable */ // import { L } from '../lib/leaflet';\nconst $4de382f2f83f6ba7$export$4c5dd147b21b9176 = (locations)=>{\n    // const displayMap = (locations) => { // Xx: this is the way to 'require' when working on JS Xx: testing multiple times what would make leaflet stop giving unexpected import errors; solution was to include \"type='module' \" when importing the script in tour.pug\n    // Xx: from Q&A by Hiroshi, had to troubleshoot the remaining issues\n    // document.addEventListener('DOMContentLoaded', function () {\n    //   let locations;\n    //   if (document.getElementById('map')) {\n    //     locations = JSON.parse(document.getElementById('map').dataset.locations);\n    //     console.log('locations: ', locations);\n    // Xx: the location data is stored in dataset.locations because it is called data-locations\n    // Xx: using leaflet.js instead of mapbox as suggested in the course\n    // Xx: from https://github.com/Leaflet/Leaflet/issues/3962 by Dipinrajc April 26, 2018\n    var container = L.DomUtil.get(\"map\");\n    if (container != null) container._leaflet_id = null;\n    // Xx: from Q&A, using leaflet instead of mapbox\n    var map = map != null ? map : L.map(\"map\", {\n        zoomControl: false\n    });\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n    const points = [];\n    locations.forEach((loc)=>{\n        points.push([\n            loc.coordinates[1],\n            loc.coordinates[0]\n        ]);\n        L.marker([\n            loc.coordinates[1],\n            loc.coordinates[0]\n        ]).addTo(map).bindPopup(`<p>Day ${loc.day}: ${loc.description}</p>`, {\n            autoClose: false\n        }).openPopup();\n    });\n    const bounds = L.latLngBounds(points).pad(0.5);\n    map.fitBounds(bounds);\n    map.scrollWheelZoom.disable();\n}; // module.exports = displayMap; // Xx: this is the way to 'require' when working on JS Xx: testing multiple times what would make leaflet stop giving unexpected import errors; solution was to include \"type='module' \" when importing the script in tour.pug// Xx: this is the way to 'require' when working on JS Xx: testing multiple times what would make leaflet stop giving unexpected import errors; solution was to include \"type='module' \" when importing the script in tour.pug\n //   });\n // };\n\n\n/* eslint-disable */ \n/* eslint-disable */ // Xx: this is the slide down html alerts when you log in\n// Xx: it's mostly js and html manipulation, so I dont understand a lot\nconst $5c1b0cddcdce5e8e$export$516836c6a9dfc573 = ()=>{\n    const el = document.querySelector(\".alert\");\n    if (el) el.parentElement.removeChild(el);\n};\nconst $5c1b0cddcdce5e8e$export$de026b00723010c1 = (type, msg, time = 7)=>{\n    // Xx: if we dont specify, the time will be 7 * 1000 miliseconds = 7 seconds\n    $5c1b0cddcdce5e8e$export$516836c6a9dfc573();\n    const markup = `<div class=\"alert alert--${type}\">${msg}</div>`;\n    document.querySelector(\"body\").insertAdjacentHTML(\"afterbegin\", markup);\n    window.setTimeout($5c1b0cddcdce5e8e$export$516836c6a9dfc573, time * 1000);\n};\n\n\nconst $e466156f4c41845f$export$596d806903d1f59e = async (email, password)=>{\n    // Xx: only modern browsers accept async functions so should be careful about compatibility when using it\n    try {\n        // alert(email, password);\n        // Xx: as a test, create an alert window with email and pw typed in; alert does not show correctly 2 objects, maybe console log is better\n        // Xx: axios is the module responsible to send the calls from front to back\n        const res = await (0, ($parcel$interopDefault($lRq1g$axios)))({\n            method: \"POST\",\n            // url: 'http://127.0.0.1:3000/api/v1/users/login',\n            url: \"/api/v1/users/login\",\n            data: {\n                email: email,\n                password: password\n            }\n        });\n        if (res.data.status === \"success\") {\n            (0, $5c1b0cddcdce5e8e$export$de026b00723010c1)(\"success\", \"Logged in successfully!\");\n            window.setTimeout(()=>{\n                location.assign(\"/\");\n            }, 1500); // Xx: send the user to the home page after 1.5s\n        }\n    } catch (err) {\n        (0, $5c1b0cddcdce5e8e$export$de026b00723010c1)(\"error\", err.response.data.message); // Xx: err.response.data comes from Axious documentation; it displays the error reports from server in the client console\n    }\n};\nconst $e466156f4c41845f$export$a0973bcfe11b05c9 = async ()=>{\n    try {\n        const res = await (0, ($parcel$interopDefault($lRq1g$axios)))({\n            method: \"GET\",\n            url: \"/api/v1/users/logout\"\n        });\n        // Xx: reload the page so the user does not see the page as logged in even tho they logged out\n        // Xx: test if the received data is success\n        if (res.data.status === \"success\") location.reload(true); // Xx: the true is really important otherwise it would reload from cash and would still have the logged in page\n    } catch (err) {\n        // Xx: usually there wouldnt be any errors when logging out, but just in case, for example, in case there is no connection\n        console.log(err.response);\n        (0, $5c1b0cddcdce5e8e$export$de026b00723010c1)(\"error\", \"Error logging out! Try again.\");\n    }\n};\n\n\n// updateData function, call that function from index.js\n\n\nconst $3843a6bc3071435b$export$f558026a994b6051 = async (data, type)=>{\n    try {\n        const url = type === \"password\" ? \"/api/v1/users/updateMyPassword\" : \"/api/v1/users/updateMe\";\n        const res = await (0, ($parcel$interopDefault($lRq1g$axios)))({\n            method: \"PATCH\",\n            url: url,\n            data: data\n        });\n        // console.log(res);\n        if (res.data.status === \"success\") {\n            (0, $5c1b0cddcdce5e8e$export$de026b00723010c1)(\"success\", `${type.toUpperCase()} updated successfully!`);\n            window.setTimeout(()=>{\n                location.reload(true);\n            }, 1500);\n        }\n    } catch (err) {\n        (0, $5c1b0cddcdce5e8e$export$de026b00723010c1)(\"error\", err.response.data.message);\n    }\n};\n\n\n\n/* eslint-disable */ \n\nconst $c6b38b6b1de4b63b$export$8d5bdbf26681c0c2 = async (tourId)=>{\n    const stripe = Stripe(\"pk_test_51PG0r7ELunyUxCByvmwaLcuqIjDu0iocPF2RvcYqKFtnIzUs8LoDQsysQOb72hWGsdgckKVCAqqGswOh67a1OQfh00gznvQBmC\");\n    try {\n        // 1) get checkout session from API\n        const session = await (0, ($parcel$interopDefault($lRq1g$axios)))(`/api/v1/bookings/checkout-session/${tourId}`);\n        // Xx: since it's a simple GET method, we can write it this way\n        // console.log(session);\n        // 2) Create checkout form + charge credit card\n        await stripe.redirectToCheckout({\n            sessionId: session.data.session.id\n        });\n    } catch (err) {\n        console.log(err);\n        (0, $5c1b0cddcdce5e8e$export$de026b00723010c1)(\"error\", err);\n    }\n};\n\n\n// DOM ELEMENTS Xx: except leaflet\nconst $fa79da8abd1c9dd8$var$loginForm = document.querySelector(\".form--login\");\nconst $fa79da8abd1c9dd8$var$logoutBtn = document.querySelector(\".nav__el--logout\");\nconst $fa79da8abd1c9dd8$var$userDataForm = document.querySelector(\".form-user-data\");\nconst $fa79da8abd1c9dd8$var$userPasswordForm = document.querySelector(\".form-user-password\");\nconst $fa79da8abd1c9dd8$var$bookBtn = document.getElementById(\"book-tour\"); // Xx: ID of button.btn.btn--green.span-all-rows#book-tour(data-tour-id=`${tour.id}`) Book tour now! in tour.pug\n// LEAFLET\nconst $fa79da8abd1c9dd8$var$leafLet = document.getElementById(\"map\");\nif ($fa79da8abd1c9dd8$var$leafLet) document.addEventListener(\"DOMContentLoaded\", function() {\n    const locations = JSON.parse(document.getElementById(\"map\").dataset.locations);\n    (0, $4de382f2f83f6ba7$export$4c5dd147b21b9176)(locations);\n});\nif ($fa79da8abd1c9dd8$var$loginForm) $fa79da8abd1c9dd8$var$loginForm.addEventListener(\"submit\", (e)=>{\n    // Xx: querySelector is used to select based on the class, then we pass the selector name\n    // Xx: addEventListener to listen to when forms are submitted\n    // Xx: in the callback function we will have access to the event, so e\n    e.preventDefault();\n    // Xx: preventDefault is to prevent the form from submitting in standard html method\n    const email = document.getElementById(\"email\").value;\n    const password = document.getElementById(\"password\").value;\n    // Xx: getting e-mail and password from the form\n    (0, $e466156f4c41845f$export$596d806903d1f59e)(email, password);\n});\nif ($fa79da8abd1c9dd8$var$logoutBtn) $fa79da8abd1c9dd8$var$logoutBtn.addEventListener(\"click\", (0, $e466156f4c41845f$export$a0973bcfe11b05c9));\nif ($fa79da8abd1c9dd8$var$userDataForm) $fa79da8abd1c9dd8$var$userDataForm.addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    const form = new FormData(); // Xx: basically recreating the form-data from what we would need to change in the html code to upload files, enctype='multipart/form-data' (see comment in account.pug)\n    form.append(\"name\", document.getElementById(\"name\").value);\n    form.append(\"email\", document.getElementById(\"email\").value);\n    form.append(\"photo\", document.getElementById(\"photo\").files[0]); // Xx: files is an array; since there is only one, we select the first element\n    // const name = document.getElementById('name').value;\n    // const email = document.getElementById('email').value;\n    // Xx: commented out the first implementation of the code, before adding photo upload functionalityy\n    // updateSettings({ name, email }, 'data')\n    (0, $3843a6bc3071435b$export$f558026a994b6051)(form, \"data\"); // Xx: axious will recognize the form as an object and work the same as before\n});\nif ($fa79da8abd1c9dd8$var$userPasswordForm) $fa79da8abd1c9dd8$var$userPasswordForm.addEventListener(\"submit\", async (e)=>{\n    e.preventDefault();\n    document.querySelector(\".btn--save-password\").textContent = \"Updating...\";\n    const passwordCurrent = document.getElementById(\"password-current\").value;\n    const password = document.getElementById(\"password\").value;\n    const passwordConfirm = document.getElementById(\"password-confirm\").value;\n    await (0, $3843a6bc3071435b$export$f558026a994b6051)({\n        passwordCurrent: passwordCurrent,\n        password: password,\n        passwordConfirm: passwordConfirm\n    }, \"password\");\n    document.querySelector(\".btn--save-password\").textContent = \"Change password\";\n    document.getElementById(\"password-current\").value = \"\";\n    document.getElementById(\"password\").value = \"\";\n    document.getElementById(\"password-confirm\").value = \"\";\n// Xx: clean up the password fields after updating password, though it might not be needed since Im refreshing the page\n});\nif ($fa79da8abd1c9dd8$var$bookBtn) $fa79da8abd1c9dd8$var$bookBtn.addEventListener(\"click\", (e)=>{\n    e.target.textContent = \"Processing...\"; // Xx: changes the text off the button once the event listener listens (on click)\n    // Xx: e is event\n    // const tourId = e.target.dataset.tourId; // Xx: event.target is basically the element that was clicked, the one that triggered this eventlistener, and we have the tourID\n    const { tourId: tourId } = e.target.dataset; // Xx: since tourId is the same on both sides we can use destructuring\n    // Xx: the data-tour-id from button.btn.btn--green.span-all-rows#book-tour(data-tour-id=`${tour.id}`) Book tour now! in the tour.pug will automatically convert to tourId\n    // Xx: anything coming after data- will convert like that (data-tour-id becomes tourId)\n    (0, $c6b38b6b1de4b63b$export$8d5bdbf26681c0c2)(tourId); // Xx: with this the tourId should get passed into the url to be used in the call by axios which in turn should return a checkout session\n});\n//- Xx: (data-alert=`${alert ? alert : ''}`) if there is an alert use the alert; otherwise display nothing;\n//- Xx: this is the first step to allow displaying the booking successful alert.\n//- Xx: then we will include an alert keyword in the query string\n//- Xx: then we will have a middleware which will take that keyword from the url and will put an alert message on response.locals\n//- Xx: finally we will then implement it in index.js\nconst $fa79da8abd1c9dd8$var$alertMessage = document.querySelector(\"body\").dataset.alert;\nif (alert) (0, $5c1b0cddcdce5e8e$export$de026b00723010c1)(\"success\", $fa79da8abd1c9dd8$var$alertMessage);\n\n\n//# sourceMappingURL=index.js.map\n","/* eslint-disable */\r\nimport '@babel/polyfill';\r\nimport { displayMap } from './leaflet';\r\n// const displayMap = require('./leaflet'); // Xx: this is the way to 'require' when working on JS Xx: testing multiple times what would make leaflet stop giving unexpected import errors; solution was to include \"type='module' \" when importing the script in tour.pug\r\nimport { login, logout } from './login';\r\nimport { updateSettings } from './updateSettings';\r\nimport { showAlert } from './alerts';\r\nimport { bookTour } from './stripe';\r\n\r\n// DOM ELEMENTS Xx: except leaflet\r\nconst loginForm = document.querySelector('.form--login');\r\nconst logoutBtn = document.querySelector('.nav__el--logout');\r\nconst userDataForm = document.querySelector('.form-user-data');\r\nconst userPasswordForm = document.querySelector('.form-user-password');\r\nconst bookBtn = document.getElementById('book-tour'); // Xx: ID of button.btn.btn--green.span-all-rows#book-tour(data-tour-id=`${tour.id}`) Book tour now! in tour.pug\r\n\r\n// LEAFLET\r\nconst leafLet = document.getElementById('map');\r\nif (leafLet) {\r\n  document.addEventListener('DOMContentLoaded', function () {\r\n    const locations = JSON.parse(document.getElementById('map').dataset.locations);\r\n    displayMap(locations);\r\n  });\r\n}\r\n\r\nif (loginForm)\r\n  loginForm.addEventListener('submit', (e) => {\r\n    // Xx: querySelector is used to select based on the class, then we pass the selector name\r\n    // Xx: addEventListener to listen to when forms are submitted\r\n    // Xx: in the callback function we will have access to the event, so e\r\n    e.preventDefault();\r\n    // Xx: preventDefault is to prevent the form from submitting in standard html method\r\n    const email = document.getElementById('email').value;\r\n    const password = document.getElementById('password').value;\r\n    // Xx: getting e-mail and password from the form\r\n    login(email, password);\r\n  });\r\n\r\nif (logoutBtn) logoutBtn.addEventListener('click', logout);\r\n\r\nif (userDataForm) {\r\n  userDataForm.addEventListener('submit', (e) => {\r\n    e.preventDefault();\r\n    const form = new FormData(); // Xx: basically recreating the form-data from what we would need to change in the html code to upload files, enctype='multipart/form-data' (see comment in account.pug)\r\n    form.append('name', document.getElementById('name').value);\r\n    form.append('email', document.getElementById('email').value);\r\n    form.append('photo', document.getElementById('photo').files[0]); // Xx: files is an array; since there is only one, we select the first element\r\n    // const name = document.getElementById('name').value;\r\n    // const email = document.getElementById('email').value;\r\n    // Xx: commented out the first implementation of the code, before adding photo upload functionalityy\r\n    // updateSettings({ name, email }, 'data')\r\n    updateSettings(form, 'data'); // Xx: axious will recognize the form as an object and work the same as before\r\n  });\r\n}\r\n\r\nif (userPasswordForm) {\r\n  userPasswordForm.addEventListener('submit', async (e) => {\r\n    e.preventDefault();\r\n    document.querySelector('.btn--save-password').textContent = 'Updating...';\r\n    const passwordCurrent = document.getElementById('password-current').value;\r\n    const password = document.getElementById('password').value;\r\n    const passwordConfirm = document.getElementById('password-confirm').value;\r\n    await updateSettings({ passwordCurrent, password, passwordConfirm }, 'password');\r\n    document.querySelector('.btn--save-password').textContent = 'Change password';\r\n    document.getElementById('password-current').value = '';\r\n    document.getElementById('password').value = '';\r\n    document.getElementById('password-confirm').value = '';\r\n    // Xx: clean up the password fields after updating password, though it might not be needed since Im refreshing the page\r\n  });\r\n}\r\n\r\nif (bookBtn)\r\n  bookBtn.addEventListener('click', (e) => {\r\n    e.target.textContent = 'Processing...'; // Xx: changes the text off the button once the event listener listens (on click)\r\n    // Xx: e is event\r\n    // const tourId = e.target.dataset.tourId; // Xx: event.target is basically the element that was clicked, the one that triggered this eventlistener, and we have the tourID\r\n    const { tourId } = e.target.dataset; // Xx: since tourId is the same on both sides we can use destructuring\r\n    // Xx: the data-tour-id from button.btn.btn--green.span-all-rows#book-tour(data-tour-id=`${tour.id}`) Book tour now! in the tour.pug will automatically convert to tourId\r\n    // Xx: anything coming after data- will convert like that (data-tour-id becomes tourId)\r\n    bookTour(tourId); // Xx: with this the tourId should get passed into the url to be used in the call by axios which in turn should return a checkout session\r\n  });\r\n\r\n//- Xx: (data-alert=`${alert ? alert : ''}`) if there is an alert use the alert; otherwise display nothing;\r\n//- Xx: this is the first step to allow displaying the booking successful alert.\r\n//- Xx: then we will include an alert keyword in the query string\r\n//- Xx: then we will have a middleware which will take that keyword from the url and will put an alert message on response.locals\r\n//- Xx: finally we will then implement it in index.js\r\nconst alertMessage = document.querySelector('body').dataset.alert;\r\nif (alert) showAlert('success', alertMessage);\r\n","/* eslint-disable */\n// import { L } from '../lib/leaflet';\nexport const displayMap = (locations) => {\n  // const displayMap = (locations) => { // Xx: this is the way to 'require' when working on JS Xx: testing multiple times what would make leaflet stop giving unexpected import errors; solution was to include \"type='module' \" when importing the script in tour.pug\n  // Xx: from Q&A by Hiroshi, had to troubleshoot the remaining issues\n  // document.addEventListener('DOMContentLoaded', function () {\n  //   let locations;\n  //   if (document.getElementById('map')) {\n  //     locations = JSON.parse(document.getElementById('map').dataset.locations);\n  //     console.log('locations: ', locations);\n  // Xx: the location data is stored in dataset.locations because it is called data-locations\n  // Xx: using leaflet.js instead of mapbox as suggested in the course\n\n  // Xx: from https://github.com/Leaflet/Leaflet/issues/3962 by Dipinrajc April 26, 2018\n  var container = L.DomUtil.get('map');\n  if (container != null) {\n    container._leaflet_id = null;\n  }\n\n  // Xx: from Q&A, using leaflet instead of mapbox\n  var map = map != null ? map : L.map('map', { zoomControl: false });\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n  }).addTo(map);\n\n  const points = [];\n  locations.forEach((loc) => {\n    points.push([loc.coordinates[1], loc.coordinates[0]]);\n    L.marker([loc.coordinates[1], loc.coordinates[0]])\n      .addTo(map)\n      .bindPopup(`<p>Day ${loc.day}: ${loc.description}</p>`, {\n        autoClose: false,\n      })\n      .openPopup();\n  });\n\n  const bounds = L.latLngBounds(points).pad(0.5);\n  map.fitBounds(bounds);\n\n  map.scrollWheelZoom.disable();\n};\n\n// module.exports = displayMap; // Xx: this is the way to 'require' when working on JS Xx: testing multiple times what would make leaflet stop giving unexpected import errors; solution was to include \"type='module' \" when importing the script in tour.pug// Xx: this is the way to 'require' when working on JS Xx: testing multiple times what would make leaflet stop giving unexpected import errors; solution was to include \"type='module' \" when importing the script in tour.pug\n//   });\n// };\n","/* eslint-disable */\nimport axios from 'axios';\nimport { showAlert } from './alerts';\n\nexport const login = async (email, password) => {\n  // Xx: only modern browsers accept async functions so should be careful about compatibility when using it\n  try {\n    // alert(email, password);\n    // Xx: as a test, create an alert window with email and pw typed in; alert does not show correctly 2 objects, maybe console log is better\n\n    // Xx: axios is the module responsible to send the calls from front to back\n    const res = await axios({\n      method: 'POST',\n      // url: 'http://127.0.0.1:3000/api/v1/users/login',\n      url: '/api/v1/users/login', // Xx: changed from a fixed url to a relative URL, so it will look for this link within the current URL\n      data: {\n        email, // Xx: frontend is sending an email property and backend is also expecting an email property, so leaving it as just email works\n        password,\n      },\n    });\n\n    if (res.data.status === 'success') {\n      showAlert('success', 'Logged in successfully!');\n      window.setTimeout(() => {\n        location.assign('/');\n      }, 1500); // Xx: send the user to the home page after 1.5s\n    }\n  } catch (err) {\n    showAlert('error', err.response.data.message); // Xx: err.response.data comes from Axious documentation; it displays the error reports from server in the client console\n  }\n};\n\nexport const logout = async () => {\n  try {\n    const res = await axios({\n      method: 'GET',\n      url: '/api/v1/users/logout',\n    });\n    // Xx: reload the page so the user does not see the page as logged in even tho they logged out\n    // Xx: test if the received data is success\n    if (res.data.status === 'success') location.reload(true); // Xx: the true is really important otherwise it would reload from cash and would still have the logged in page\n  } catch (err) {\n    // Xx: usually there wouldnt be any errors when logging out, but just in case, for example, in case there is no connection\n    console.log(err.response);\n    showAlert('error', 'Error logging out! Try again.');\n  }\n};\n","/* eslint-disable */\r\n\r\n// Xx: this is the slide down html alerts when you log in\r\n// Xx: it's mostly js and html manipulation, so I dont understand a lot\r\n\r\nexport const hideAlert = () => {\r\n  const el = document.querySelector('.alert');\r\n  if (el) el.parentElement.removeChild(el);\r\n};\r\n\r\n// type is 'success or 'error'\r\nexport const showAlert = (type, msg, time = 7) => {\r\n  // Xx: if we dont specify, the time will be 7 * 1000 miliseconds = 7 seconds\r\n  hideAlert();\r\n  const markup = `<div class=\"alert alert--${type}\">${msg}</div>`;\r\n  document.querySelector('body').insertAdjacentHTML('afterbegin', markup);\r\n  window.setTimeout(hideAlert, time * 1000);\r\n};\r\n","// updateData function, call that function from index.js\r\nimport axios from 'axios';\r\nimport { showAlert } from './alerts';\r\n\r\n// Xx: original code to update just name or email; updating the code to be the same for name, email and password\r\n// export const updateData = async (name, email) => {\r\n//   try {\r\n//     const res = await axios({\r\n//       method: 'PATCH',\r\n//       url: 'http://127.0.0.1:3000/api/v1/users/updateMe',\r\n//       data: {\r\n//         name,\r\n//         email,\r\n//       },\r\n//     });\r\n\r\n//     if (res.data.status === 'success') {\r\n//       showAlert('success', 'User details updated successfully!');\r\n//       window.setTimeout(() => {\r\n//         location.reload(true);\r\n//       }, 1500);\r\n//     }\r\n//   } catch (err) {\r\n//     showAlert('error', err.response.data.message);\r\n//   }\r\n// };\r\n\r\n// type is either 'password' or 'data'\r\n// Xx: data will be an object will all the data to be updated (name and email or password?)\r\nexport const updateSettings = async (data, type) => {\r\n  try {\r\n    const url = type === 'password' ? '/api/v1/users/updateMyPassword' : '/api/v1/users/updateMe';\r\n\r\n    const res = await axios({\r\n      method: 'PATCH',\r\n      url,\r\n      data,\r\n    });\r\n\r\n    // console.log(res);\r\n\r\n    if (res.data.status === 'success') {\r\n      showAlert('success', `${type.toUpperCase()} updated successfully!`);\r\n      window.setTimeout(() => {\r\n        location.reload(true);\r\n      }, 1500);\r\n    }\r\n  } catch (err) {\r\n    showAlert('error', err.response.data.message);\r\n  }\r\n};\r\n","/* eslint-disable */\r\nimport axios from 'axios';\r\nimport { showAlert } from './alerts';\r\n\r\n// Xx: general process to implement on website:\r\n// Xx: started editing tour.pug to receive the tour ID and editted some html elements\r\n// Xx: added the stripe api script to the tour.pug\r\n// Xx: step 1 (below) of this stripe.js, include public key and get method with axios\r\n// Xx: include btn element in index.js and include the event handler based on that button\r\n\r\nexport const bookTour = async (tourId) => {\r\n  const stripe = Stripe(\r\n    'pk_test_51PG0r7ELunyUxCByvmwaLcuqIjDu0iocPF2RvcYqKFtnIzUs8LoDQsysQOb72hWGsdgckKVCAqqGswOh67a1OQfh00gznvQBmC',\r\n  );\r\n  try {\r\n    // 1) get checkout session from API\r\n    const session = await axios(`/api/v1/bookings/checkout-session/${tourId}`);\r\n    // Xx: since it's a simple GET method, we can write it this way\r\n    // console.log(session);\r\n\r\n    // 2) Create checkout form + charge credit card\r\n    await stripe.redirectToCheckout({\r\n      sessionId: session.data.session.id,\r\n      // Xx: axios res is in session\r\n      // Xx: axios creates a data object, so session.id is inside that data object\r\n      // Xx: to test the payment in the stripe checkout session in test mode, cc no is 4242 4242 4242 4242 (...)\r\n      // Xx: valid through can be any future date; CVC can be any 3 digitis, name can be anything, country can be anything and hit pay :)\r\n      // Xx: goes to the success url after finishing payment\r\n      // Xx: after the payment is successful, users also received an email from stripe automatically (unless we deactivate it)\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n    showAlert('error', err);\r\n  }\r\n};\r\n"],"names":["require","$lRq1g$axios","$parcel$interopDefault","a","__esModule","default","$4de382f2f83f6ba7$export$4c5dd147b21b9176","locations","container","L","DomUtil","get","_leaflet_id","map","zoomControl","tileLayer","attribution","addTo","points","forEach","loc","push","coordinates","marker","bindPopup","day","description","autoClose","openPopup","bounds","latLngBounds","pad","fitBounds","scrollWheelZoom","disable","$5c1b0cddcdce5e8e$export$516836c6a9dfc573","el","document","querySelector","parentElement","removeChild","$5c1b0cddcdce5e8e$export$de026b00723010c1","type","msg","time","markup","insertAdjacentHTML","window","setTimeout","$e466156f4c41845f$export$596d806903d1f59e","email","password","res","method","url","data","status","location","assign","err","response","message","$e466156f4c41845f$export$a0973bcfe11b05c9","reload","console","log","$3843a6bc3071435b$export$f558026a994b6051","toUpperCase","$c6b38b6b1de4b63b$export$8d5bdbf26681c0c2","tourId","stripe","Stripe","session","redirectToCheckout","sessionId","id","$fa79da8abd1c9dd8$var$loginForm","$fa79da8abd1c9dd8$var$logoutBtn","$fa79da8abd1c9dd8$var$userDataForm","$fa79da8abd1c9dd8$var$userPasswordForm","$fa79da8abd1c9dd8$var$bookBtn","getElementById","addEventListener","JSON","parse","dataset","e","preventDefault","value","form","FormData","append","files","textContent","passwordCurrent","passwordConfirm","target","$fa79da8abd1c9dd8$var$alertMessage","alert"],"version":3,"file":"index.js.map","sourceRoot":"../../../"}